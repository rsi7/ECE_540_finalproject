KCPSM6 Assembler log file for program 'C:\Users\Rehan\OneDrive\Documents\ECE_540\FinalProject\firmware\finalproject.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 08 Dec 2015
Assembly timestamp: 14:12:49

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 426 hex
Nominal program memory size: 2K (2048)   address(10:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 183
Memory locations available: 3913


Assembly listing

 Addr Code                     Instruction

 000                           ; ============================================
 000                           ; === Register Names                       ===
 000                           ; === s6 - s0 registers are not dedicated  ===
 000                           ; === and keep their default names         ===
 000                           ; ============================================
 000                           NAMEREG sF, Fft_Red_reg                   ; RGB red
 000                           NAMEREG sE, Fft_Green_reg                 ; RGB Green
 000                           NAMEREG sD, Fft_Blue_reg                  ; RGB Blue
 000                           NAMEREG sC, pbtns_reg                     ; Pushbutton
 000                           NAMEREG sB, color_reg                     ; Current Color, red or green or blue
 000                           NAMEREG sA, dv_reg                        ; Current value of red or green or blue
 000                           NAMEREG s9, DIG100S                       ; Hundreds digit
 000                           NAMEREG s8, DIG10S                        ; Tens digit
 000                           NAMEREG s7, DIG1S                         ; Ones digit...also used to pass in
 000                           ; ======================
 000                           ; === Port Addresses ===
 000                           ; ======================
 000                           ;------Pushbutton---
 000                           CONSTANT PA_PBTNS, 00                     ; (i) pushbuttons inputs
 000                           ;------SEVENSEGMENT---
 000                           CONSTANT PA_DIG7, 01                      ; (i) slide switches
 000                           CONSTANT PA_DIG6, 02                      ; (o) LEDs
 000                           CONSTANT PA_DIG5, 03                      ; (o) digit 3 port address
 000                           CONSTANT PA_DIG4, 04                      ; (o) digit 2 port address
 000                           CONSTANT PA_DIG3, 05                      ; (o) digit 1 port address
 000                           CONSTANT PA_DIG2, 06                      ; (o) digit 0 port address
 000                           CONSTANT PA_DIG1, 07                      ; (o) decimal points 3:0 port address
 000                           CONSTANT PA_DIG0, 08                      ; (o) decimal points 3:0 port address
 000                           ;------RGB---
 000                           CONSTANT PA_FFT_RED, 0A                   ; (O) RBG_RED
 000                           CONSTANT PA_FFT_GREEN, 0B                 ; (O) RGB_GREEN
 000                           CONSTANT PA_FFT_BLUE, 0C                  ; (O) RGB_BLUE
 000                           ;------Delay-----
 000                           CONSTANT DELAYVAL_1uS, 18                 ; 1us delay count
 000                           ; ==================================
 000                           ; === Masking and other constant ===
 000                           ; ==================================
 000                           CONSTANT MSK_ALLBTNS, 1F                  ; Buttons are in bits[5:0]
 000                           CONSTANT BtnCenter, 10                    ;
 000                           CONSTANT BtnLeft, 08                      ;
 000                           CONSTANT BtnUp, 04                        ;
 000                           CONSTANT BtnRight, 02                     ;
 000                           CONSTANT BtnDown, 01                      ;
 000                           CONSTANT BtnNo, 00                        ;
 000                           ;----- RGB DEFINING
 000                           CONSTANT RED_REG_DS, 25                   ; sevensegment value for displying R
 000                           CONSTANT GREEN_REG_DS, 09                 ; sevensegment value for displying g
 000                           CONSTANT BLUE_REG_DS, 11                  ; sevensegment value for displying B
 000                           ;----- RGB DEFAULT VALUE
 000                           CONSTANT Red_Default, 00                  ; red value
 000                           CONSTANT Green_Default, 0F                ; green value
 000                           CONSTANT Blue_Default, 00                 ; blur value
 000                           ;----- Define a few BCD constants
 000                           CONSTANT ONEHUNDRED, 64                   ; 100 is 64 Hex
 000                           CONSTANT TEN, 0A                          ; 10 is 0A hex
 000                           ; =====================
 000                           ; === Program Start ===
 000                           ; =====================
 000                           ADDRESS 000
 000  22004                    JUMP 004[main]                            ; workaround to avoid location 3 corruption
 001  22004                    JUMP 004[main]                            ; by Vivado Hardware Manager.  Bug was flagged by
 002  22004                    JUMP 004[main]                            ; Ken Chapman and is known to be in 2014.2
 003  22004                    JUMP 004[main]                            ; Address 003 can be corrupted by Vivado HW manager
 004                           ;
 004  2000C              main: CALL 00C[init_colors]                     ; initialize Color reg with default value
 005  20012                    CALL 012[DEB_rdbtns]                      ; initialize button
 006                           ; ==================
 006                           ; === Main  Loop ===
 006                           ; ==================
 006  20015           main_L0: CALL 015[compare_pb]
 007  20075                    CALL 075[BIN2BCD]                         ; convert binary value in BCD
 008  20083                    CALL 083[Seven_segment]                   ;
 009  20087                    CALL 087[output_RGB]                      ;
 00A  2041D                    CALL 41D[delay_500ms]                     ;
 00B  22006                    JUMP 006[main_L0]                         ;
 00C                           ; ========================================================================
 00C                           ; ===      Initialize colors for the FFT        ===
 00C                           ; ========================================================================
 00C  01B09       init_colors: LOAD sB[color_reg], 09[GREEN_REG_DS]      ;
 00D  01F00                    LOAD sF[Fft_Red_reg], 00[Red_Default]     ;
 00E  01E0F                    LOAD sE[Fft_Green_reg], 0F[Green_Default] ;
 00F  01D00                    LOAD sD[Fft_Blue_reg], 00[Blue_Default]   ;
 010  00AE0                    LOAD sA[dv_reg], sE[Fft_Green_reg]        ;
 011  25000                    RETURN                                    ;
 012                           ; ========================================================================
 012                           ; ===      Read in pushbutton inputs        ===
 012                           ; ========================================================================
 012  09C00        DEB_rdbtns: INPUT sC[pbtns_reg], 00[PA_PBTNS]         ; read the buttons
 013  03C1F                    AND sC[pbtns_reg], 1F[MSK_ALLBTNS]        ; mask out unused bits
 014  25000                    RETURN                                    ; and return
 015                           ; ========================================================================
 015                           ; === Compare pushbuttons and take action up/down color and value ===
 015                           ; ========================================================================
 015  20012        compare_pb: CALL 012[DEB_rdbtns]                      ;
 016  1DC00                    COMPARE sC[pbtns_reg], 00[BtnNo]          ;
 017  31000                    RETURN Z                                  ;
 018  1DC01                    COMPARE sC[pbtns_reg], 01[BtnDown]        ;
 019  30023                    CALL Z, 023[down_color]                   ;
 01A  1DC04                    COMPARE sC[pbtns_reg], 04[BtnUp]          ;
 01B  3002A                    CALL Z, 02A[up_color]                     ;
 01C  1DC01                    COMPARE sC[pbtns_reg], 01[BtnDown]        ;
 01D  30037                    CALL Z, 037[value_down]                   ;
 01E  1DC01                    COMPARE sC[pbtns_reg], 01[BtnDown]        ;
 01F  30056                    CALL Z, 056[value_up]                     ;
 020  1DC10                    COMPARE sC[pbtns_reg], 10[BtnCenter]      ;
 021  31000                    RETURN Z                                  ;
 022  25000                    RETURN                                    ;
 023                           ; ================================================================================================
 023                           ; === action down color, check current status of color and then down (r to g, g to b, b to r) ====
 023                           ; ================================================================================================
 023  1DB25        down_color: COMPARE sB[color_reg], 25[RED_REG_DS]     ;
 024  30031                    CALL Z, 031[select_green]                 ;
 025  1DB09                    COMPARE sB[color_reg], 09[GREEN_REG_DS]   ;
 026  30033                    CALL Z, 033[select_blue]                  ;
 027  1DB11                    COMPARE sB[color_reg], 11[BLUE_REG_DS]    ;
 028  30035                    CALL Z, 035[select_red]                   ;
 029  25000                    RETURN                                    ;
 02A                           ; ========================================================================================
 02A                           ; === action up color, check current status of color and then up (r to b, g to r, b to r)
 02A                           ; ========================================================================================
 02A  1DB25          up_color: COMPARE sB[color_reg], 25[RED_REG_DS]     ;
 02B  30033                    CALL Z, 033[select_blue]                  ;
 02C  1DB09                    COMPARE sB[color_reg], 09[GREEN_REG_DS]   ;
 02D  30035                    CALL Z, 035[select_red]                   ;
 02E  1DB11                    COMPARE sB[color_reg], 11[BLUE_REG_DS]    ;
 02F  30035                    CALL Z, 035[select_red]                   ;
 030  25000                    RETURN                                    ;
 031                           ; ========================================================================
 031                           ; === load selected or next color action
 031                           ; ========================================================================
 031  01B09      select_green: LOAD sB[color_reg], 09[GREEN_REG_DS]      ;
 032  25000                    RETURN                                    ;
 033  01B11       select_blue: LOAD sB[color_reg], 11[BLUE_REG_DS]       ;
 034  25000                    RETURN                                    ;
 035  01B25        select_red: LOAD sB[color_reg], 25[RED_REG_DS]        ;
 036  25000                    RETURN                                    ;
 037                           ; =================================================================================================
 037                           ; === action down value of color, check current status of color(r,g,b) and then down r/g/b reg
 037                           ; =================================================================================================
 037  1DB25        value_down: COMPARE sB[color_reg], 25[RED_REG_DS]     ;
 038  3003E                    CALL Z, 03E[red_reg_down]                 ;
 039  1DB09                    COMPARE sB[color_reg], 09[GREEN_REG_DS]   ;
 03A  30046                    CALL Z, 046[green_reg_down]               ;
 03B  1DB11                    COMPARE sB[color_reg], 11[BLUE_REG_DS]    ;
 03C  3004E                    CALL Z, 04E[blue_reg_down]                ;
 03D  25000                    RETURN                                    ;
 03E                           ; ===================================================================================================================
 03E                           ; === check current value of color(min), if minimum then load r/g/b reg with 0f(1111) else decrement by 1 r/g/b reg
 03E                           ;        and update current value of reg (dv_reg)
 03E                           ;; ==================================================================================================================
 03E                           ;
 03E                           ;             RED
 03E                           ; ===========================================================================================
 03E  1DF00      red_reg_down: COMPARE sF[Fft_Red_reg], 00               ;
 03F  32043                    JUMP Z, 043[red_decrement]                ;
 040  19F01                    SUB sF[Fft_Red_reg], 01                   ;
 041  00AF0                    LOAD sA[dv_reg], sF[Fft_Red_reg]          ;
 042  25000                    RETURN                                    ;
 043                           ; ===========================================================================================
 043                           ; === load r/g/b reg with 0f(1111) and update current value of reg (dv_reg)
 043                           ; ===========================================================================================
 043  01F0F     red_decrement: LOAD sF[Fft_Red_reg], 0F                  ;
 044  00AF0                    LOAD sA[dv_reg], sF[Fft_Red_reg]          ;
 045  25000                    RETURN                                    ;
 046                           ; ===========================================================================================
 046                           ;           Green
 046                           ; ===========================================================================================
 046  1DE00    green_reg_down: COMPARE sE[Fft_Green_reg], 00             ;
 047  3204B                    JUMP Z, 04B[green_decrement]              ;
 048  19E01                    SUB sE[Fft_Green_reg], 01                 ;
 049  00AE0                    LOAD sA[dv_reg], sE[Fft_Green_reg]        ;
 04A  25000                    RETURN                                    ;
 04B                           ; ===========================================================================================
 04B                           ; === load r/g/b reg with 0f(1111) and update current value of reg (dv_reg)
 04B                           ; ===========================================================================================
 04B  01E0F   green_decrement: LOAD sE[Fft_Green_reg], 0F                ;
 04C  00AE0                    LOAD sA[dv_reg], sE[Fft_Green_reg]        ;
 04D  25000                    RETURN                                    ;
 04E                           ; ===========================================================================================
 04E                           ;             Blue
 04E                           ; ===========================================================================================
 04E  1DD00     blue_reg_down: COMPARE sD[Fft_Blue_reg], 00              ;
 04F  32053                    JUMP Z, 053[blue_decrement]               ;
 050  19D01                    SUB sD[Fft_Blue_reg], 01                  ;
 051  00AD0                    LOAD sA[dv_reg], sD[Fft_Blue_reg]         ;
 052  25000                    RETURN                                    ;
 053                           ; ===========================================================================================
 053                           ; === load r/g/b reg with 0f(1111) and update current value of reg (dv_reg)
 053                           ; ===========================================================================================
 053  01D0F    blue_decrement: LOAD sD[Fft_Blue_reg], 0F                 ;
 054  00AD0                    LOAD sA[dv_reg], sD[Fft_Blue_reg]         ;
 055  25000                    RETURN                                    ;
 056                           ; ===========================================================================================
 056                           ; === action up value of color, check current status of color(r,g,b) and up down r/g/b reg
 056                           ; ===========================================================================================
 056  1DB25          value_up: COMPARE sB[color_reg], 25[RED_REG_DS]     ;
 057  3005D                    CALL Z, 05D[red_reg_up]                   ;
 058  1DB09                    COMPARE sB[color_reg], 09[GREEN_REG_DS]   ;
 059  30065                    CALL Z, 065[green_reg_up]                 ;
 05A  1DB11                    COMPARE sB[color_reg], 11[BLUE_REG_DS]    ;
 05B  3006D                    CALL Z, 06D[blue_reg_up]                  ;
 05C  25000                    RETURN                                    ;
 05D                           ; ==================================================================================================================
 05D                           ; === check current value of color(min), if maximum then load r/g/b reg with 00(0000) else increment by 1 r/g/b reg
 05D                           ;        and update current value of reg (dv_reg)
 05D                           ;; =================================================================================================================
 05D                           ;
 05D                           ;             RED
 05D                           ; ============================================================================================
 05D  1DF0F        red_reg_up: COMPARE sF[Fft_Red_reg], 0F               ;
 05E  32062                    JUMP Z, 062[red_increament]               ;
 05F  11F01                    ADD sF[Fft_Red_reg], 01                   ;
 060  00AF0                    LOAD sA[dv_reg], sF[Fft_Red_reg]          ;
 061  25000                    RETURN                                    ;
 062                           ; ===========================================================================================
 062                           ; === load r/g/b reg with 00(0000) and update current value of reg (dv_reg)
 062                           ; ===========================================================================================
 062  01F00    red_increament: LOAD sF[Fft_Red_reg], 00                  ;
 063  00AF0                    LOAD sA[dv_reg], sF[Fft_Red_reg]          ;
 064  25000                    RETURN 
 065                           ; ===========================================================================================
 065                           ;             Green
 065                           ; ===========================================================================================
 065  1DE0F      green_reg_up: COMPARE sE[Fft_Green_reg], 0F             ;
 066  3206A                    JUMP Z, 06A[green_increament]             ;
 067  11E01                    ADD sE[Fft_Green_reg], 01                 ;
 068  00AE0                    LOAD sA[dv_reg], sE[Fft_Green_reg]        ;
 069  25000                    RETURN                                    ;
 06A                           ; ===========================================================================================
 06A                           ; === load r/g/b reg with 00(0000) and update current value of reg (dv_reg)
 06A                           ; ===========================================================================================
 06A  01E00  green_increament: LOAD sE[Fft_Green_reg], 00                ;
 06B  00AE0                    LOAD sA[dv_reg], sE[Fft_Green_reg]        ;
 06C  25000                    RETURN 
 06D                           ; ===========================================================================================
 06D                           ;             Blue
 06D                           ; ===========================================================================================
 06D  1DD0F       blue_reg_up: COMPARE sD[Fft_Blue_reg], 0F              ;
 06E  32072                    JUMP Z, 072[blue_increment]               ;
 06F  11D01                    ADD sD[Fft_Blue_reg], 01                  ;
 070  00AD0                    LOAD sA[dv_reg], sD[Fft_Blue_reg]         ;
 071  25000                    RETURN                                    ;
 072  01D00    blue_increment: LOAD sD[Fft_Blue_reg], 00                 ;
 073  00AD0                    LOAD sA[dv_reg], sD[Fft_Blue_reg]         ;
 074  25000                    RETURN                                    ;
 075                           ; ===========================================================================================
 075                           ;         Binary to BCD conversion
 075                           ; ===========================================================================================
 075  007A0           BIN2BCD: LOAD s7[DIG1S], sA[dv_reg]                ; load binary value for BCD conversion
 076  01900                    LOAD s9[DIG100S], 00                      ; clear the digits
 077  01800                    LOAD s8[DIG10S], 00                       ;
 078                           ;
 078                   LP100S: ;
 078  1D764                    COMPARE s7[DIG1S], 64[ONEHUNDRED]         ; while (input >= 100) {
 079  3A07D                    JUMP C, 07D[LP10S]                        ; // C=1 says input < 100
 07A                           ; // check 10s next
 07A  11901                    ADD s9[DIG100S], 01                       ; hundreds_digit =
 07B                           ; hundreds_digit + 1
 07B  19764                    SUB s7[DIG1S], 64[ONEHUNDRED]             ; input = input - 100
 07C  22078                    JUMP 078[LP100S]                          ; }
 07D                           ;
 07D                    LP10S: ;
 07D  1D70A                    COMPARE s7[DIG1S], 0A[TEN]                ; while (input >= 10) {
 07E  39000                    RETURN C                                  ; // C=1 says input < 10, ones
 07F                           ; // are left in DIG1S (s0) so
 07F                           ; // return
 07F  11801                    ADD s8[DIG10S], 01                        ; tens_digit = tens_digit + 1
 080  1970A                    SUB s7[DIG1S], 0A[TEN]                    ; input = input - 10
 081  2207D                    JUMP 07D[LP10S]                           ; }
 082                           ;
 082  25000                    RETURN                                    ; all done
 083                           ; ===========================================================================================
 083                           ;          Seven_segment
 083                           ; ===========================================================================================
 083            Seven_segment: 
 083  2D708                    OUTPUT s7[DIG1S], 08[PA_DIG0]             ;
 084  2D807                    OUTPUT s8[DIG10S], 07[PA_DIG1]            ;
 085  2DB04                    OUTPUT sB[color_reg], 04[PA_DIG4]         ;
 086  25000                    RETURN                                    ;
 087                           ; ========================================================================
 087                           ; ===       Outputting RGB to ImgCtrl        ===
 087                           ; ========================================================================
 087  000D0        output_RGB: LOAD s0, sD[Fft_Blue_reg]                 ;
 088  2D00C                    OUTPUT s0, 0C[PA_FFT_BLUE]                ;
 089  000F0                    LOAD s0, sF[Fft_Red_reg]                  ;
 08A  2D00A                    OUTPUT s0, 0A[PA_FFT_RED]                 ;
 08B  000E0                    LOAD s0, sE[Fft_Green_reg]                ;
 08C  2D00B                    OUTPUT s0, 0B[PA_FFT_GREEN]               ;
 08D  25000                    RETURN 
 08E                           ; =========================
 08E                           ; === Interrupt Handler ===
 08E                           ; =========================
 300                           ADDRESS 300
 300  29001               isr: RETURNI ENABLE                            ; and return from interrupt
 301                           ; ========================
 301                           ; === Interrupt vector ===
 301                           ; ========================
 3FF                           ADDRESS 3FF
 3FF  22300           intvect: JUMP 300[isr]                             ; jump to interrupt service routine
 400                           ; ========================================================
 400                           ; === delay_1us() - delays execution for 1 microsecond ===
 400                           ; === Registers affected: s0 ===
 400                           ; ========================================================
 400  01018         delay_1us: LOAD s0, 18[DELAYVAL_1uS]                 ; Load 1us delay constant
 401  19001          wait_1us: SUB s0, 01                                ; count down to 0
 402  36401                    JUMP NZ, 401[wait_1us]                    ; and then return
 403  25000                    RETURN 
 404                           ; ===========================================================
 404                           ; === delay_40us() - delays execution for 40 microseconds ===
 404                           ; === Registers affected: s0, s1 ===
 404                           ; ===========================================================
 404  01128        delay_40us: LOAD s1, 28                               ; 40 x 1us = 40us
 405  20400         wait_40us: CALL 400[delay_1us]                       ; delay 1us
 406  19101                    SUB s1, 01                                ; count down to 0
 407  36405                    JUMP NZ, 405[wait_40us]                   ; and then return
 408  25000                    RETURN 
 409                           ; ========================================================
 409                           ; === delay_1 ms() - delays execution for 1 milisecond ===
 409                           ; === Registers affected: s0, s1, s2 ===
 409                           ; ========================================================
 409  01219         delay_1ms: LOAD s2, 19                               ; 25 x 40us = 1ms
 40A  20404          wait_1ms: CALL 404[delay_40us]                      ; delay 40us
 40B  19201                    SUB s2, 01                                ; count down to 0
 40C  3640A                    JUMP NZ, 40A[wait_1ms]                    ; and then return
 40D  25000                    RETURN 
 40E                           ; ===================================================================
 40E                           ; === delay_50 ms() - delays execution for 50 miliseconds (20Hz)===
 40E                           ; === Registers affected: s0, s1, s2, s3 ===
 40E                           ; ===================================================================
 40E  01332        delay_50ms: LOAD s3, 32                               ; 50 x 1ms = 50ms
 40F  20409         wait_50ms: CALL 409[delay_1ms]                       ; delay 1ms
 410  19301                    SUB s3, 01                                ; count down to 0
 411  3640F                    JUMP NZ, 40F[wait_50ms]                   ; and then return
 412  25000                    RETURN 
 413                           ;*********************************************************************
 413                           ; ===================================================================
 413                           ; === delay_100 ms() - delays execution for 100 miliseconds (10Hz)===
 413                           ; === Registers affected: s0, s1, s2, s3 ===
 413                           ; ===================================================================
 413  01364       delay_100ms: LOAD s3, 64                               ; 100 x 1ms = 100ms
 414  20409        wait_100ms: CALL 409[delay_1ms]                       ; delay 1ms
 415  19301                    SUB s3, 01                                ; count down to 0
 416  36414                    JUMP NZ, 414[wait_100ms]                  ; and then return
 417  25000                    RETURN 
 418                           ;*********************************************************************
 418                           ; ==================================================================
 418                           ; === delay_200 ms() - delays execution for 200 miliseconds (5Hz)===
 418                           ; === Registers affected: s0, s1, s2, s3 ===
 418                           ; ==================================================================
 418  013C8       delay_200ms: LOAD s3, C8                               ; 200 x 1ms = 200ms
 419  20409        wait_200ms: CALL 409[delay_1ms]                       ; delay 1ms
 41A  19301                    SUB s3, 01                                ; count down to 0
 41B  36419                    JUMP NZ, 419[wait_200ms]                  ; and then return
 41C  25000                    RETURN 
 41D                           ;*********************************************************************
 41D                           ; ==================================================================
 41D                           ; === delay_500 ms() - delays execution for 500 miliseconds (2Hz)===
 41D                           ; === Registers affected: s0, s1, s2, s3 ===
 41D                           ; ==================================================================
 41D  01405       delay_500ms: LOAD s4, 05                               ; 5 x 100ms = 200ms
 41E  20413        wait_500ms: CALL 413[delay_100ms]                     ; delay 100ms
 41F  19401                    SUB s4, 01                                ; count down to 0
 420  3641E                    JUMP NZ, 41E[wait_500ms]                  ; and then return
 421  25000                    RETURN 
 422                           ;*********************************************************************
 422                           ; ===============================================================
 422                           ; === delay_1000 ms() - delays execution for 1000 miliseconds ===
 422                           ; === Registers affected: s0, s1, s2, s3, s4 ===
 422                           ; ===============================================================
 422  01405      delay_1000ms: LOAD s4, 05                               ; 5 x 200ms = 1000ms
 423  20418       wait_1000ms: CALL 418[delay_200ms]                     ; delay 200ms
 424  19401                    SUB s4, 01                                ; count down to 0
 425  36423                    JUMP NZ, 423[wait_1000ms]                 ; and then return
 426  25000                    RETURN 
 427                           ;*******************************************************************


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

C:\Users\Rehan\OneDrive\Documents\ECE_540\FinalProject\firmware\finalproject.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   14'd         
 timestamp_minutes 12'd         
 timestamp_seconds 49'd         
 datestamp_year    15'd         
 datestamp_month   12'd         
 datestamp_day     08'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 PA_PBTNS          00           finalproject.psm
 PA_DIG7           01           finalproject.psm
 PA_DIG6           02           finalproject.psm
 PA_DIG5           03           finalproject.psm
 PA_DIG4           04           finalproject.psm
 PA_DIG3           05           finalproject.psm
 PA_DIG2           06           finalproject.psm
 PA_DIG1           07           finalproject.psm
 PA_DIG0           08           finalproject.psm
 PA_FFT_RED        0A           finalproject.psm
 PA_FFT_GREEN      0B           finalproject.psm
 PA_FFT_BLUE       0C           finalproject.psm
 DELAYVAL_1uS      18           finalproject.psm
 MSK_ALLBTNS       1F           finalproject.psm
 BtnCenter         10           finalproject.psm
 BtnLeft           08           finalproject.psm
 BtnUp             04           finalproject.psm
 BtnRight          02           finalproject.psm
 BtnDown           01           finalproject.psm
 BtnNo             00           finalproject.psm
 RED_REG_DS        25           finalproject.psm
 GREEN_REG_DS      09           finalproject.psm
 BLUE_REG_DS       11           finalproject.psm
 Red_Default       00           finalproject.psm
 Green_Default     0F           finalproject.psm
 Blue_Default      00           finalproject.psm
 ONEHUNDRED        64           finalproject.psm
 TEN               0A           finalproject.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "08 Dec 2015"  
 timestamp$        "14:12:49"     



List of line labels

   Label              Addr  Source PSM File

   main               004   finalproject.psm
   main_L0            006   finalproject.psm
   init_colors        00C   finalproject.psm
   DEB_rdbtns         012   finalproject.psm
   compare_pb         015   finalproject.psm
   down_color         023   finalproject.psm
   up_color           02A   finalproject.psm
   select_green       031   finalproject.psm
   select_blue        033   finalproject.psm
   select_red         035   finalproject.psm
   value_down         037   finalproject.psm
   red_reg_down       03E   finalproject.psm
   red_decrement      043   finalproject.psm
   green_reg_down     046   finalproject.psm
   green_decrement    04B   finalproject.psm
   blue_reg_down      04E   finalproject.psm
   blue_decrement     053   finalproject.psm
   value_up           056   finalproject.psm
   red_reg_up         05D   finalproject.psm
   red_increament     062   finalproject.psm
   green_reg_up       065   finalproject.psm
   green_increament   06A   finalproject.psm
   blue_reg_up        06D   finalproject.psm
   blue_increment     072   finalproject.psm
   BIN2BCD            075   finalproject.psm
   LP100S             078   finalproject.psm
   LP10S              07D   finalproject.psm
   Seven_segment      083   finalproject.psm
   output_RGB         087   finalproject.psm
   isr                300   finalproject.psm
 * intvect            3FF   finalproject.psm
   delay_1us          400   finalproject.psm
   wait_1us           401   finalproject.psm
   delay_40us         404   finalproject.psm
   wait_40us          405   finalproject.psm
   delay_1ms          409   finalproject.psm
   wait_1ms           40A   finalproject.psm
 * delay_50ms         40E   finalproject.psm
   wait_50ms          40F   finalproject.psm
   delay_100ms        413   finalproject.psm
   wait_100ms         414   finalproject.psm
   delay_200ms        418   finalproject.psm
   wait_200ms         419   finalproject.psm
   delay_500ms        41D   finalproject.psm
   wait_500ms         41E   finalproject.psm
 * delay_1000ms       422   finalproject.psm
   wait_1000ms        423   finalproject.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             40
 STAR              -

 AND               1
 OR                -
 XOR               -

 ADD               5
 ADDCY             -
 SUB              13
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE          26
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             1
 OUTPUT            6
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           1

 JUMP             23
 JUMP@             -
 CALL             31
 CALL@             -
 RETURN           36
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
