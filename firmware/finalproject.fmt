                ; ============================================
                ; === Register Names                       ===
                ; === s6 - s0 registers are not dedicated  ===
                ; === and keep their default names         ===
                ; ============================================
                NAMEREG sF, RegDig7                ; register for writing to Digit 7
                NAMEREG sE, RegDig6                ; register for writing to Digit 6
                NAMEREG sD, RegDig5                ; register for writing to Digit 5
                NAMEREG sC, RegBtns                ; Pushbutton inputs
                NAMEREG sB, RegCurrColor           ; Current color (RED, GRN, BLUE) being displayed
                NAMEREG sA, RegCurrValue           ; 8-bit value of current color being displayed
                NAMEREG s9, RegHundreds            ; Hundreds digit for Bin2Dec routine
                NAMEREG s8, RegTens                ; Tens digit for Bin2Dec routine
                NAMEREG s7, RegOnes                ; Ones digit for Bin2Dec routine
                ; ======================
                ; === Port Addresses ===
                ; ======================
                ;------Pushbutton---
                CONSTANT PA_PBTNS, 00              ; (i) pushbuttons inputs
                ;------SEVENSEGMENT---
                CONSTANT PA_DIG7, 01               ; (o) digit 7 port address
                CONSTANT PA_DIG6, 02               ; (o) digit 6 port address
                CONSTANT PA_DIG5, 03               ; (o) digit 5 port address
                CONSTANT PA_DIG4, 04               ; (o) digit 4 port address
                CONSTANT PA_DIG3, 05               ; (o) digit 3 port address
                CONSTANT PA_DIG2, 06               ; (o) digit 2 port address
                CONSTANT PA_DIG1, 07               ; (o) digit 1 port address
                CONSTANT PA_DIG0, 08               ; (o) digit 0 port address
                ;------RGB---
                CONSTANT PA_FFT_RED, 0A            ; (o) 4-bit color value to use in FFT display
                CONSTANT PA_FFT_GREEN, 0B          ; (o) 4-bit color value to use in FFT display
                CONSTANT PA_FFT_BLUE, 0C           ; (o) 4-bit color value to use in FFT display
                ;------Delay-----
                CONSTANT DELAYVAL_1uS, 18          ; 1us delay count
                ; ==================================
                ; === Masking and other constant ===
                ; ==================================
                CONSTANT MSK_ALLBTNS, 1F           ; Keep db_pbtns [5:0]
                CONSTANT MSK_BTN_CENTER, 10        ; Only keep db_pbtns[5]
                CONSTANT MSK_BTN_LEFT, 08          ; Only keep db_pbtns[4]
                CONSTANT MSK_BTN_UP, 04            ; Only keep db_pbtns[3]
                CONSTANT MSK_BTN_RIGHT, 02         ; Only keep db_pbtns[2]
                CONSTANT MSK_BTN_DOWN, 01          ; Only keep db_pbtns[1]
                CONSTANT MSK_LOW_4BITS, 0F         ; keep only [3:0] for R/G/B values
                ;----- Color indicator for menu
                CONSTANT CODE_RED, 0A              ; state encoding for 'red'
                CONSTANT CODE_GREEN, 0B            ; state encoding for 'green'
                CONSTANT CODE_BLUE, 0C             ; state encoding for 'blue'
                ;----- Default color values
                CONSTANT DEFAULT_RED, 00           ; initial red value for FFT display
                CONSTANT DEFAULT_GREEN, 0F         ; initial green value for FFT display
                CONSTANT DEFAULT_BLUE, 00          ; initial blue value for FFT display
                ;----- Define a few BCD constants
                CONSTANT BIN_100, 64               ; binary 100 == hex 64
                CONSTANT BIN_10, 0A                ; binary 10 == hex 0A
                ;----- Define addresses for scratchpad memory
                CONSTANT SP_CURR_STATE, 30         ; address to read encoding for the current state
                CONSTANT SP_CURR_VALUE, 31         ; address to store value for current color
                CONSTANT SP_RED_VALUE, 32          ; address to read 4'b red color value
                CONSTANT SP_GREEN_VALUE, 33        ; address to read 4'b green color value
                CONSTANT SP_BLUE_VALUE, 34         ; address to read 4'b blue color value
                ; =====================
                ; === Program Start ===
                ; =====================
                ADDRESS 000
                JUMP main                          ; workaround to avoid location 3 corruption
                JUMP main                          ; by Vivado Hardware Manager.  Bug was flagged by
                JUMP main                          ; Ken Chapman and is known to be in 2014.2
                JUMP main                          ; Address 003 can be corrupted by Vivado HW manager
                ;
          main: CALL init_colors                   ; initialize red, green, blue values for FFT display
                ENABLE INTERRUPT                   ; get the ball rolling
                ; ==================
                ; === Main  Loop ===
                ; ==================
       main_L0: CALL state_machine                 ; call sub-routine to update state or R/G/B value
                CALL bin2bcd                       ; converts RegCurrValue's binary data to decimal encoding
                CALL write_7segment                ; write RegOnes, RegTens, RegCurrentColor to 7-segment display
                CALL output_RGB                    ; outputs R, G, B values to FFT registers
                CALL delay_500ms                   ; delay for 500ms b/c we don't want menu to be too fast
                JUMP main_L0                       ; rinse, dry, repeat
                ; ========================================================================
                ; ===   init_colors: Initialize RGB values for the FFT       ===
                ; ========================================================================
   init_colors: LOAD RegCurrColor, CODE_RED        ; load the current color as 'red'
                STORE RegCurrColor, SP_CURR_STATE  ; store 'red' as current state for FSM
                LOAD s0, DEFAULT_RED               ; initialize red value as 4'b0000
                STORE s0, SP_RED_VALUE             ; store this red value into scratchpad
                LOAD RegCurrValue, s0              ; load the current value as 4'b0000
                LOAD s0, DEFAULT_GREEN             ; initialize green value as 4'b1111
                STORE s0, SP_GREEN_VALUE           ; store this green value into scratchpad
                LOAD s0, DEFAULT_BLUE              ; initialize blue value as 4'b0000
                STORE s0, SP_BLUE_VALUE            ; store this blue value into scratchpad
                LOAD RegDig7, 00                   ; clear digit 7
                LOAD RegDig6, 00                   ; clear digit 6
                LOAD RegDig5, 00                   ; clear digit 5
                RETURN                             ; return to main_L0
                ; ================================================================================================================
                ; ===    state_machine: updates state or R/G/B value based on current state & button inputs       ===
                ; ================================================================================================================
 state_machine: COMPARE RegCurrColor, CODE_RED     ; check if the current state is 'red'
                JUMP Z, state_red                  ; if so, jump to routine for handling that state
                COMPARE RegCurrColor, CODE_GREEN   ; check if the current state is 'green'
                JUMP Z, state_green                ; if so, jump to routine for handling that state
                COMPARE RegCurrColor, CODE_BLUE    ; check if the current state is 'blue'
                JUMP Z, state_blue                 ; if so, jump to routine for handling that state
                RETURN                             ; return to main_L0 (code shouldn't reach this point, though)
     state_red: STORE RegCurrValue, SP_RED_VALUE   ; keep 'red' value in scratchpad up-to-date
                LOAD RegDig7, 1A                   ; load digit 7 with code for 'R'
                LOAD RegDig6, 0E                   ; load digit 6 with code for 'E'
                LOAD RegDig5, 0D                   ; load digit 5 with code for 'D'
                LOAD s0, RegBtns                   ; load db_pbtns[5:0] into s0
                COMPARE s0, MSK_BTN_LEFT           ; see if only btnL is pressed
                JUMP Z, go_to_blue                 ; if so, change the current state to 'blue'
                COMPARE s0, MSK_BTN_RIGHT          ; see if only btnR is pressed
                JUMP Z, go_to_green                ; if so, change the current state to 'green'
                COMPARE s0, MSK_BTN_UP             ; see if only btnU is pressed
                JUMP Z, inc_cur_val                ; if so, increment the value of current color (red)
                COMPARE s0, MSK_BTN_DOWN           ; see if only btnD is pressed
                JUMP Z, dec_cur_val                ; if so, decrement the value of current color (red)
                RETURN                             ; return to main_L0 if button inputs don't match
   state_green: STORE RegCurrValue, SP_GREEN_VALUE ; keep 'green' value in scratchpad up-to-date
                LOAD RegDig7, 06                   ; load digit 7 with code for 'G'
                LOAD RegDig6, 1A                   ; load digit 6 with code for 'R'
                LOAD RegDig5, 1F                   ; load digit 5 with code for 'N'
                LOAD s0, RegBtns                   ; load db_pbtns[5:0] into s0
                COMPARE s0, MSK_BTN_LEFT           ; see if only btnL is pressed
                JUMP Z, go_to_red                  ; if so, change the current state to 'red'
                COMPARE s0, MSK_BTN_RIGHT          ; see if only btnR is pressed
                JUMP Z, go_to_blue                 ; if so, change the current state to 'blue'
                COMPARE s0, MSK_BTN_UP             ; see if only btnU is pressed
                JUMP Z, inc_cur_val                ; if so, increment the value of current color (green)
                COMPARE s0, MSK_BTN_DOWN           ; see if only btnD is pressed
                JUMP Z, dec_cur_val                ; if so, decrement the value of current color (green)
                RETURN                             ; return to main_L0 if button inputs don't match
    state_blue: STORE RegCurrValue, SP_BLUE_VALUE  ; keep 'blue' value in scratchpad up-to-date
                LOAD RegDig7, 0B                   ; load digit 7 with code for 'B'
                LOAD RegDig6, 19                   ; load digit 6 with code for 'L'
                LOAD RegDig5, 1E                   ; load digit 5 with code for 'U'
                LOAD s0, RegBtns                   ; load db_pbtns[5:0] into s0
                COMPARE s0, MSK_BTN_LEFT           ; see if only btnL is pressed
                JUMP Z, go_to_green                ; if so, change the current state to 'green'
                COMPARE s0, MSK_BTN_RIGHT          ; see if only btnR is pressed
                JUMP Z, go_to_red                  ; if so, change the current state to 'red'
                COMPARE s0, MSK_BTN_UP             ; see if only btnU is pressed
                JUMP Z, inc_cur_val                ; if so, increment the value of current color (blue)
                COMPARE s0, MSK_BTN_DOWN           ; see if only btnD is pressed
                JUMP Z, dec_cur_val                ; if so, decrement the value of current color (blue)
                RETURN                             ; return to main_L0 if button inputs don't match
     go_to_red: LOAD RegCurrColor, CODE_RED        ; set the state as 'red'
                STORE RegCurrColor, SP_CURR_STATE  ; update the state stored in scratchpad
                FETCH RegCurrValue, SP_RED_VALUE   ; fetch the stored 'red' value into current value reg
                STORE RegCurrValue, SP_CURR_VALUE  ; store this value into scratchpad
                RETURN                             ; return to main_L0
   go_to_green: LOAD RegCurrColor, CODE_GREEN      ; set the state as 'green'
                STORE RegCurrColor, SP_CURR_STATE  ; update the state stored in scratchpad
                FETCH RegCurrValue, SP_GREEN_VALUE ; fetch the stored 'green' value into current value reg
                STORE RegCurrValue, SP_CURR_VALUE  ; store this value into scratchpad
                RETURN                             ; return to main_L0
    go_to_blue: LOAD RegCurrColor, CODE_BLUE       ; set the state as 'blue'
                STORE RegCurrColor, SP_CURR_STATE  ; update the state stored in scratchpad
                FETCH RegCurrValue, SP_BLUE_VALUE  ; fetch the stored 'blue' value into current value reg
                STORE RegCurrValue, SP_CURR_VALUE  ; store this value into scratchpad
                RETURN                             ; return to main_L0
   inc_cur_val: ADD RegCurrValue, 01               ; increment the current value by 1
                STORE RegCurrValue, SP_CURR_VALUE  ; store this value into scratchpad
                RETURN 
   dec_cur_val: SUB RegCurrValue, 01               ; decrement the current value by 1
                STORE RegCurrValue, SP_CURR_VALUE  ; store this value into scratchpad
                RETURN 
                ; ===========================================================================================
                ;        bin2bcd: Binary to Decimal conversion
                ; ===========================================================================================
       bin2bcd: FETCH s0, SP_CURR_VALUE            ; fetch current value into s0
                AND s0, MSK_LOW_4BITS              ; keep maximum value as 16
                LOAD RegOnes, s0                   ; load binary value for BCD conversion
                LOAD RegHundreds, 00               ; clear the digits
                LOAD RegTens, 00                   ;
                ;
     loop_100s: COMPARE RegOnes, BIN_100           ; while (input >= 100) {
                JUMP C, loop_10s                   ; // C == 1 means input < 100
                ; // check 10s next
                ADD RegHundreds, 01                ; hundreds_digit =
                ; hundreds_digit + 1
                SUB RegOnes, BIN_100               ; input = input - 100
                JUMP loop_100s                     ; }
                ;
      loop_10s: COMPARE RegOnes, BIN_10            ; while (input >= 10) {
                RETURN C                           ; // C=1 says input < 10, ones
                ; // are left in RegOnes (s0) so
                ; // return
                ADD RegTens, 01                    ; tens_digit = tens_digit + 1
                SUB RegOnes, BIN_10                ; input = input - 10
                JUMP loop_10s                      ; }
                ;
                RETURN                             ; return to main_L0
                ; ===========================================================================================
                ;     write_7segment: writes Digits [7:0] to 7-segment display
                ; ===========================================================================================
write_7segment: OUTPUT RegOnes, PA_DIG0            ; write BCD ones value --> digit 0
                OUTPUT RegTens, PA_DIG1            ; write BCD tens value --> digit 1
                LOAD s0, 1D                        ; load reg s0 with 5'd29 (blank code)
                OUTPUT s0, PA_DIG2                 ; send blank code --> digit 2
                OUTPUT s0, PA_DIG3                 ; send blank code --> digit 3
                OUTPUT s0, PA_DIG4                 ; send blank code --> digit 4
                OUTPUT RegDig5, PA_DIG5            ; write color name --> digit 5
                OUTPUT RegDig6, PA_DIG6            ; write color name --> digit 6
                OUTPUT RegDig7, PA_DIG7            ; write color name --> digit 7
                RETURN                             ; return to main_L0
                ; ========================================================================
                ; ===    output_RGB: Outputting RGB to ImgCtrl        ===
                ; ========================================================================
    output_RGB: FETCH s0, SP_RED_VALUE             ; fetch the current red value into s0
                AND s0, MSK_LOW_4BITS              ; only keep bits [3:0] for VGA red output
                OUTPUT s0, PA_FFT_RED              ; write the red value to the FFT
                FETCH s0, SP_GREEN_VALUE           ; fetch the current green value into s0
                AND s0, MSK_LOW_4BITS              ; only keep bits [3:0] for VGA green output
                OUTPUT s0, PA_FFT_GREEN            ; write the green value to the FFT
                FETCH s0, SP_BLUE_VALUE            ; fetch the stored blue value into s0
                AND s0, MSK_LOW_4BITS              ; only keep bits [3:0] for VGA blue output
                OUTPUT s0, PA_FFT_BLUE             ; write the blue value to the FFT
                RETURN                             ; return to main_L0
                ; ========================================================
                ; === delay_1us() - delays execution for 1 microsecond ===
                ; === Registers affected: s0 ===
                ; ========================================================
     delay_1us: LOAD s0, DELAYVAL_1uS              ; Load 1us delay constant
      wait_1us: SUB s0, 01                         ; count down to 0
                JUMP NZ, wait_1us                  ; and then return
                RETURN 
                ; ===========================================================
                ; === delay_40us() - delays execution for 40 microseconds ===
                ; === Registers affected: s0, s1 ===
                ; ===========================================================
    delay_40us: LOAD s1, 28                        ; 40 x 1us = 40us
     wait_40us: CALL delay_1us                     ; delay 1us
                SUB s1, 01                         ; count down to 0
                JUMP NZ, wait_40us                 ; and then return
                RETURN 
                ; ========================================================
                ; === delay_1 ms() - delays execution for 1 milisecond ===
                ; === Registers affected: s0, s1, s2 ===
                ; ========================================================
     delay_1ms: LOAD s2, 19                        ; 25 x 40us = 1ms
      wait_1ms: CALL delay_40us                    ; delay 40us
                SUB s2, 01                         ; count down to 0
                JUMP NZ, wait_1ms                  ; and then return
                RETURN 
                ; ===================================================================
                ; === delay_50 ms() - delays execution for 50 miliseconds (20Hz)===
                ; === Registers affected: s0, s1, s2, s3 ===
                ; ===================================================================
    delay_50ms: LOAD s3, 32                        ; 50 x 1ms = 50ms
     wait_50ms: CALL delay_1ms                     ; delay 1ms
                SUB s3, 01                         ; count down to 0
                JUMP NZ, wait_50ms                 ; and then return
                RETURN 
                ;*********************************************************************
                ; ===================================================================
                ; === delay_100 ms() - delays execution for 100 miliseconds (10Hz)===
                ; === Registers affected: s0, s1, s2, s3 ===
                ; ===================================================================
   delay_100ms: LOAD s3, 64                        ; 100 x 1ms = 100ms
    wait_100ms: CALL delay_1ms                     ; delay 1ms
                SUB s3, 01                         ; count down to 0
                JUMP NZ, wait_100ms                ; and then return
                RETURN 
                ;*********************************************************************
                ; ==================================================================
                ; === delay_200 ms() - delays execution for 200 miliseconds (5Hz)===
                ; === Registers affected: s0, s1, s2, s3 ===
                ; ==================================================================
   delay_200ms: LOAD s3, C8                        ; 200 x 1ms = 200ms
    wait_200ms: CALL delay_1ms                     ; delay 1ms
                SUB s3, 01                         ; count down to 0
                JUMP NZ, wait_200ms                ; and then return
                RETURN 
                ;*********************************************************************
                ; ==================================================================
                ; === delay_500 ms() - delays execution for 500 miliseconds (2Hz)===
                ; === Registers affected: s0, s1, s2, s3 ===
                ; ==================================================================
   delay_500ms: LOAD s4, 05                        ; 5 x 100ms = 200ms
    wait_500ms: CALL delay_100ms                   ; delay 100ms
                SUB s4, 01                         ; count down to 0
                JUMP NZ, wait_500ms                ; and then return
                RETURN 
                ;*********************************************************************
                ; ===============================================================
                ; === delay_1000 ms() - delays execution for 1000 miliseconds ===
                ; === Registers affected: s0, s1, s2, s3, s4 ===
                ; ===============================================================
  delay_1000ms: LOAD s4, 05                        ; 5 x 200ms = 1000ms
   wait_1000ms: CALL delay_200ms                   ; delay 200ms
                SUB s4, 01                         ; count down to 0
                JUMP NZ, wait_1000ms               ; and then return
                RETURN 
                ;*******************************************************************
                ; =========================
                ; === Interrupt Handler ===
                ; =========================
                ADDRESS 300
           isr: INPUT RegBtns, PA_PBTNS            ; read the pushbuttons
                AND RegBtns, MSK_ALLBTNS           ; mask all but db_pbtns[5:0]
                RETURNI ENABLE                     ; and return from interrupt
                ; ========================
                ; === Interrupt vector ===
                ; ========================
                ADDRESS 3FF
       intvect: JUMP isr                           ; jump to interrupt service routine
